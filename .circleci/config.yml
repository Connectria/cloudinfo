version: 2.1

workdir: &workdir /go/src/github.com/banzaicloud/cloudinfo

jobs:
  dependencies:
    docker:
      - image: circleci/golang:1.11

    working_directory: *workdir

    steps:
      - checkout

      - restore_cache:
          name: Restore build dependencies
          keys:
          - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
          - build-deps-v1-{{ .Branch }}
          - build-deps-v1-master
          - build-deps-v1

      - restore_cache:
          name: Restore dependencies
          keys:
          - gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          - gopkg-v1-{{ .Branch }}
          - gopkg-v1-master
          - gopkg-v1

      - run:
          name: Install dependencies
          command: |
            make vendor
            make bin/golangci-lint
            make bin/licensei
            make bin/gotestsum

      - save_cache:
          name: Save dependencies
          key: gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/

      - save_cache:
          name: Save build dependencies
          key: build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
          paths:
            - bin/

  static-checks:
    docker:
      - image: circleci/golang:1.11

    working_directory: *workdir

    steps:
      - checkout

      - restore_cache:
          name: Restore build dependencies
          keys:
          - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

      - restore_cache:
          name: Restore dependencies
          keys:
          - gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}

      - restore_cache:
          name: Restore license cache
          keys:
          - licensei-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          - licensei-v1-{{ .Branch }}
          - licensei-v1-master
          - licensei-v1

      - run:
          name: Download license information for dependencies
          command: make license-cache

      - save_cache:
          name: Save license cache
          key: licensei-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - .licensei.cache

      - run:
          name: Check dependency licenses
          command: make license-check

      - run:
          name: Run linter
          command: make lint

  build:
    docker:
      - image: circleci/golang:1.11

    working_directory: *workdir

    steps:
      - checkout

      - restore_cache:
          name: Restore build dependencies
          keys:
          - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

      - restore_cache:
          name: Restore dependencies
          keys:
          - gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}

      - run:
          name: Build
          command:
            make build

  unit-tests:
    docker:
      - image: circleci/golang:1.11

    working_directory: *workdir

    steps:
      - checkout

      - restore_cache:
          name: Restore build dependencies
          keys:
          - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

      - restore_cache:
          name: Restore dependencies
          keys:
          - gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}

      - run:
          name: Run unit tests
          command: make test

      - store_test_results:
          path: build/test_results/

      - store_artifacts:
          path: build/test_results/

  integration-tests:
    docker:
      - image: circleci/golang:1.11
      - image: redis:5.0
      - image: cassandra:3.11
        environment:
          MAX_HEAP_SIZE: 1024m
          HEAP_NEWSIZE: 256m

    working_directory: *workdir

    steps:
      - checkout

      - restore_cache:
          name: Restore build dependencies
          keys:
          - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

      - restore_cache:
          name: Restore dependencies
          keys:
          - gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}

      - run:
          name: Run integration tests
          command: make test-integration

      - store_test_results:
          path: build/test_results/

      - store_artifacts:
          path: build/test_results/

workflows:
  version: 2
  ci:
    jobs:
      - dependencies
      - build:
          requires:
            - dependencies
      - static-checks:
          requires:
            - dependencies
      - unit-tests:
          requires:
            - dependencies
      - integration-tests:
          requires:
            - dependencies
